syntax = "proto3";
package spacemesh.v1;
import "spacemesh/v1/types.proto";
import "google/rpc/status.proto";

message IsSmeshingResponse {
    google.rpc.Status status = 1;
}

message StartSmeshingResponse {
    google.rpc.Status status = 1;
}

message StopSmeshingResponse {
    google.rpc.Status status = 1;
}

message SetCoinbaseRequest {
    AccountId id = 1;
}

message SetCoinbaseResponse {
    google.rpc.Status status = 1;
}

message MinGasResponse {
    SimpleInt mingas = 1;
}

message SetMinGasRequest {
    SimpleInt mingas = 1;
}

message SetMinGasResponse {
    google.rpc.Status status = 1;
}

message CreatePostDataResponse {
    google.rpc.Status status = 1;
}

message StopPostDataCreationSessionResponse {
    google.rpc.Status status = 1;
}

message SmesherIdResponse {
    AccountId account_id = 1;
}

message CoinbaseResponse {
    AccountId account_id = 1;
}

// Bit flags for compute engine selection
enum ComputeEngineFlag {
    COMPUTE_ENGINE_FLAG_UNSPECIFIED = 0;
    COMPUTE_ENGINE_FLAG_CPU = 1; // useful for testing on systems without a cuda or vulkan GPU
    COMPUTE_ENGINE_FLAG_CUDA = 2;
    COMPUTE_ENGINE_FLAG_VULKAN = 4;
}

message ComputeEngineFlags {
    uint32 compute_engine_flags = 1;
}

message AvailableComputeEnginesResponse {
    ComputeEngineFlags flags = 1;
}

// Basic post data. Used for users to provide requested post data and by
// other messages which contain post data.
message PostData {
    string path = 1; // User provided path to create the post data files at
    uint64 data_size = 2; // Requested post data size
    bool   append = 3; // Append to existing files if they exist. Otherwise overwrite.
    bool   throttle = 4; // Throttle down setup phase computations while user is interactive on ///system
    ComputeEngineFlags compute_engine_flags = 5; // One or more available compute engines to be used for gpu post
}

message CreatePostDataRequest {
    PostData data = 1;
}

// Param passed to methods to indicate a request to delete data files
message StopSmeshingRequest {
    bool delete_files = 1;
}

message StopPostDataCreationSessionRequest {
    bool delete_files = 1;
}

// Proof of space data status
message PostStatus {
    PostData post_data = 1; // basic post data (set previously by the user)
    enum FilesStatus {
        FILES_STATUS_UNSPECIFIED = 0; // Lane's favorite impossible value
        FILES_STATUS_NOT_FOUND = 1; // Expected data files do not exist
        FILES_STATUS_PARTIAL = 2; // Some files exist and init can be continued (and may be in progress)
        FILES_STATUS_COMPLETE = 3; // Expected data files are available and verified
    }
    FilesStatus files_status = 2;
    bool init_in_progress = 3; // True if init process is currently in progress
    uint64 bytes_written = 4; // Bytes written to the data files (actual total files sizes)
    string error_message = 5; // Last init process error message
    enum ErrorType {
        ERROR_TYPE_UNSPECIFIED = 0; // Lane's favorite imposible value
        ERROR_TYPE_FILE_NOT_FOUND = 1; // All expected post data files not found in expected path
        ERROR_TYPE_READ_ERROR = 2; // Failure to read from a data file
        ERROR_TYPE_WRITE_ERROR = 3; // Failure to write to a data file
    }
    ErrorType error_type = 6;
}

message PostStatusResponse {
    PostStatus status = 1;
}

message PostDataCreationProgressStreamResponse {
    PostStatus status = 1;
}
