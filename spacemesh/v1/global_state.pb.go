// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/v1/global_state.proto

package spacemesh_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/v1/global_state.proto", fileDescriptor_2c2fd8c0294b4b5e) }

var fileDescriptor_2c2fd8c0294b4b5e = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x86, 0xe3, 0x05, 0x93, 0x8d, 0x51, 0x19, 0x6f, 0x44, 0xe3, 0x41, 0xea, 0xc7, 0xa5, 0x88,
	0xfe, 0x02, 0x12, 0xbf, 0xae, 0xd2, 0xb3, 0x92, 0xa1, 0x0e, 0x62, 0x52, 0xda, 0x75, 0x77, 0x5a,
	0xc3, 0xaf, 0xf1, 0xaf, 0x1a, 0xe8, 0x6e, 0x5d, 0x4a, 0xd7, 0x7a, 0x9d, 0xf7, 0x99, 0xf7, 0x99,
	0x6c, 0x5a, 0x71, 0xaa, 0x25, 0xc6, 0xb4, 0x20, 0x3d, 0x1f, 0x14, 0xc3, 0xc1, 0x7b, 0x92, 0x4d,
	0x31, 0x99, 0x68, 0x46, 0xa6, 0x50, 0xaa, 0x8c, 0x33, 0xd8, 0xab, 0x80, 0xb0, 0x18, 0xf6, 0x02,
	0x2f, 0x3e, 0xe1, 0xa5, 0x24, 0x5d, 0x2e, 0xdd, 0x7c, 0x77, 0x04, 0x3c, 0xae, 0xc3, 0x68, 0x95,
	0x45, 0xa4, 0x8a, 0x8f, 0x98, 0xe0, 0x55, 0x1c, 0x38, 0xd3, 0x27, 0xd4, 0x73, 0xe8, 0x87, 0x6e,
	0x7f, 0x58, 0x8b, 0xc7, 0xf4, 0x99, 0x93, 0xe6, 0x5e, 0xd0, 0x42, 0x69, 0x99, 0xa5, 0x9a, 0xe0,
	0x41, 0xec, 0x8e, 0xe2, 0x38, 0xcb, 0x53, 0x86, 0xe3, 0xcd, 0x0d, 0x33, 0xb6, 0x7d, 0x27, 0x9e,
	0xd4, 0xf4, 0xa0, 0x38, 0x34, 0xa3, 0x3b, 0x64, 0x7c, 0xce, 0x49, 0x2d, 0x21, 0x68, 0x5c, 0xa9,
	0x72, 0xdb, 0x7c, 0xde, 0x86, 0xfd, 0x2a, 0xa2, 0x15, 0x44, 0xca, 0xab, 0xa8, 0xe7, 0x1e, 0xc5,
	0x36, 0x66, 0x14, 0x33, 0xd1, 0x75, 0xf4, 0x11, 0x2b, 0xc2, 0x05, 0xf8, 0xef, 0x2b, 0x01, 0x2b,
	0xb9, 0x68, 0xe5, 0x4a, 0xcb, 0xf5, 0x0e, 0x24, 0xe2, 0xc8, 0xdc, 0x30, 0xa6, 0x2f, 0x54, 0x6f,
	0xc6, 0x74, 0xd9, 0x78, 0xa6, 0x8b, 0x58, 0xd7, 0xd5, 0x3f, 0xc8, 0xca, 0xf6, 0x22, 0xf6, 0x47,
	0x52, 0xde, 0x17, 0x94, 0xb2, 0x11, 0x9d, 0xd5, 0x4e, 0xdd, 0x48, 0xad, 0xa3, 0xff, 0x37, 0x54,
	0xd5, 0xcf, 0x44, 0xd7, 0xfd, 0x70, 0x1b, 0x1f, 0x6d, 0x0b, 0xf0, 0x3c, 0x5a, 0x03, 0x67, 0x3d,
	0xd3, 0xce, 0xfa, 0x47, 0xb9, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x24, 0xe5, 0x09, 0x80,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GlobalStateServiceClient is the client API for GlobalStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GlobalStateServiceClient interface {
	// Latest computed global state - layer and its root hash
	GlobalStateHash(ctx context.Context, in *GlobalStateHashRequest, opts ...grpc.CallOption) (*GlobalStateHashResponse, error)
	// Account info in the current global state.
	Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// Query for account related data such as rewards, tx receipts and account info
	//
	// Note: it might be too expensive to add a param for layer to get these results from
	// as it may require indexing all global state changes per account by layer.
	// If it is possible to index by layer then we should add param start_layer to
	// AccountDataParams. Currently it will return data from genesis.
	AccountDataQuery(ctx context.Context, in *AccountDataQueryRequest, opts ...grpc.CallOption) (*AccountDataQueryResponse, error)
	// Query for smesher data. Currently returns smesher rewards.
	// Note: Not supporting start_layer yet as it may require to index all rewards by
	// smesher and by layer id or allow for queries from a layer and later....
	SmesherDataQuery(ctx context.Context, in *SmesherDataQueryRequest, opts ...grpc.CallOption) (*SmesherDataQueryResponse, error)
	// Get a stream of account related changes such as account balance change,
	// tx receipts and rewards
	AccountDataStream(ctx context.Context, in *AccountDataStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AccountDataStreamClient, error)
	// Rewards awarded to a smesher id
	SmesherRewardStream(ctx context.Context, in *SmesherRewardStreamRequest, opts ...grpc.CallOption) (GlobalStateService_SmesherRewardStreamClient, error)
	// App Events - emitted by app methods impl code trigged by an
	// app transaction
	AppEventStream(ctx context.Context, in *AppEventStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AppEventStreamClient, error)
	// New global state computed for a layer by the STF
	GlobalStateStream(ctx context.Context, in *GlobalStateStreamRequest, opts ...grpc.CallOption) (GlobalStateService_GlobalStateStreamClient, error)
}

type globalStateServiceClient struct {
	cc *grpc.ClientConn
}

func NewGlobalStateServiceClient(cc *grpc.ClientConn) GlobalStateServiceClient {
	return &globalStateServiceClient{cc}
}

func (c *globalStateServiceClient) GlobalStateHash(ctx context.Context, in *GlobalStateHashRequest, opts ...grpc.CallOption) (*GlobalStateHashResponse, error) {
	out := new(GlobalStateHashResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.GlobalStateService/GlobalStateHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.GlobalStateService/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) AccountDataQuery(ctx context.Context, in *AccountDataQueryRequest, opts ...grpc.CallOption) (*AccountDataQueryResponse, error) {
	out := new(AccountDataQueryResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.GlobalStateService/AccountDataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) SmesherDataQuery(ctx context.Context, in *SmesherDataQueryRequest, opts ...grpc.CallOption) (*SmesherDataQueryResponse, error) {
	out := new(SmesherDataQueryResponse)
	err := c.cc.Invoke(ctx, "/spacemesh.v1.GlobalStateService/SmesherDataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalStateServiceClient) AccountDataStream(ctx context.Context, in *AccountDataStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AccountDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[0], "/spacemesh.v1.GlobalStateService/AccountDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceAccountDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_AccountDataStreamClient interface {
	Recv() (*AccountDataStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceAccountDataStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceAccountDataStreamClient) Recv() (*AccountDataStreamResponse, error) {
	m := new(AccountDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) SmesherRewardStream(ctx context.Context, in *SmesherRewardStreamRequest, opts ...grpc.CallOption) (GlobalStateService_SmesherRewardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[1], "/spacemesh.v1.GlobalStateService/SmesherRewardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceSmesherRewardStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_SmesherRewardStreamClient interface {
	Recv() (*SmesherRewardStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceSmesherRewardStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceSmesherRewardStreamClient) Recv() (*SmesherRewardStreamResponse, error) {
	m := new(SmesherRewardStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) AppEventStream(ctx context.Context, in *AppEventStreamRequest, opts ...grpc.CallOption) (GlobalStateService_AppEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[2], "/spacemesh.v1.GlobalStateService/AppEventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceAppEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_AppEventStreamClient interface {
	Recv() (*AppEventStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceAppEventStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceAppEventStreamClient) Recv() (*AppEventStreamResponse, error) {
	m := new(AppEventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) GlobalStateStream(ctx context.Context, in *GlobalStateStreamRequest, opts ...grpc.CallOption) (GlobalStateService_GlobalStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[3], "/spacemesh.v1.GlobalStateService/GlobalStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceGlobalStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_GlobalStateStreamClient interface {
	Recv() (*GlobalStateStreamResponse, error)
	grpc.ClientStream
}

type globalStateServiceGlobalStateStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceGlobalStateStreamClient) Recv() (*GlobalStateStreamResponse, error) {
	m := new(GlobalStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalStateServiceServer is the server API for GlobalStateService service.
type GlobalStateServiceServer interface {
	// Latest computed global state - layer and its root hash
	GlobalStateHash(context.Context, *GlobalStateHashRequest) (*GlobalStateHashResponse, error)
	// Account info in the current global state.
	Account(context.Context, *AccountRequest) (*AccountResponse, error)
	// Query for account related data such as rewards, tx receipts and account info
	//
	// Note: it might be too expensive to add a param for layer to get these results from
	// as it may require indexing all global state changes per account by layer.
	// If it is possible to index by layer then we should add param start_layer to
	// AccountDataParams. Currently it will return data from genesis.
	AccountDataQuery(context.Context, *AccountDataQueryRequest) (*AccountDataQueryResponse, error)
	// Query for smesher data. Currently returns smesher rewards.
	// Note: Not supporting start_layer yet as it may require to index all rewards by
	// smesher and by layer id or allow for queries from a layer and later....
	SmesherDataQuery(context.Context, *SmesherDataQueryRequest) (*SmesherDataQueryResponse, error)
	// Get a stream of account related changes such as account balance change,
	// tx receipts and rewards
	AccountDataStream(*AccountDataStreamRequest, GlobalStateService_AccountDataStreamServer) error
	// Rewards awarded to a smesher id
	SmesherRewardStream(*SmesherRewardStreamRequest, GlobalStateService_SmesherRewardStreamServer) error
	// App Events - emitted by app methods impl code trigged by an
	// app transaction
	AppEventStream(*AppEventStreamRequest, GlobalStateService_AppEventStreamServer) error
	// New global state computed for a layer by the STF
	GlobalStateStream(*GlobalStateStreamRequest, GlobalStateService_GlobalStateStreamServer) error
}

// UnimplementedGlobalStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGlobalStateServiceServer struct {
}

func (*UnimplementedGlobalStateServiceServer) GlobalStateHash(ctx context.Context, req *GlobalStateHashRequest) (*GlobalStateHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalStateHash not implemented")
}
func (*UnimplementedGlobalStateServiceServer) Account(ctx context.Context, req *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedGlobalStateServiceServer) AccountDataQuery(ctx context.Context, req *AccountDataQueryRequest) (*AccountDataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDataQuery not implemented")
}
func (*UnimplementedGlobalStateServiceServer) SmesherDataQuery(ctx context.Context, req *SmesherDataQueryRequest) (*SmesherDataQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmesherDataQuery not implemented")
}
func (*UnimplementedGlobalStateServiceServer) AccountDataStream(req *AccountDataStreamRequest, srv GlobalStateService_AccountDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountDataStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) SmesherRewardStream(req *SmesherRewardStreamRequest, srv GlobalStateService_SmesherRewardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SmesherRewardStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) AppEventStream(req *AppEventStreamRequest, srv GlobalStateService_AppEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AppEventStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) GlobalStateStream(req *GlobalStateStreamRequest, srv GlobalStateService_GlobalStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GlobalStateStream not implemented")
}

func RegisterGlobalStateServiceServer(s *grpc.Server, srv GlobalStateServiceServer) {
	s.RegisterService(&_GlobalStateService_serviceDesc, srv)
}

func _GlobalStateService_GlobalStateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalStateHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).GlobalStateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.GlobalStateService/GlobalStateHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).GlobalStateHash(ctx, req.(*GlobalStateHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.GlobalStateService/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).Account(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_AccountDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).AccountDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.GlobalStateService/AccountDataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).AccountDataQuery(ctx, req.(*AccountDataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_SmesherDataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmesherDataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalStateServiceServer).SmesherDataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.v1.GlobalStateService/SmesherDataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalStateServiceServer).SmesherDataQuery(ctx, req.(*SmesherDataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalStateService_AccountDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).AccountDataStream(m, &globalStateServiceAccountDataStreamServer{stream})
}

type GlobalStateService_AccountDataStreamServer interface {
	Send(*AccountDataStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceAccountDataStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceAccountDataStreamServer) Send(m *AccountDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_SmesherRewardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SmesherRewardStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).SmesherRewardStream(m, &globalStateServiceSmesherRewardStreamServer{stream})
}

type GlobalStateService_SmesherRewardStreamServer interface {
	Send(*SmesherRewardStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceSmesherRewardStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceSmesherRewardStreamServer) Send(m *SmesherRewardStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_AppEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AppEventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).AppEventStream(m, &globalStateServiceAppEventStreamServer{stream})
}

type GlobalStateService_AppEventStreamServer interface {
	Send(*AppEventStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceAppEventStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceAppEventStreamServer) Send(m *AppEventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_GlobalStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GlobalStateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).GlobalStateStream(m, &globalStateServiceGlobalStateStreamServer{stream})
}

type GlobalStateService_GlobalStateStreamServer interface {
	Send(*GlobalStateStreamResponse) error
	grpc.ServerStream
}

type globalStateServiceGlobalStateStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceGlobalStateStreamServer) Send(m *GlobalStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GlobalStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.GlobalStateService",
	HandlerType: (*GlobalStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalStateHash",
			Handler:    _GlobalStateService_GlobalStateHash_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _GlobalStateService_Account_Handler,
		},
		{
			MethodName: "AccountDataQuery",
			Handler:    _GlobalStateService_AccountDataQuery_Handler,
		},
		{
			MethodName: "SmesherDataQuery",
			Handler:    _GlobalStateService_SmesherDataQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountDataStream",
			Handler:       _GlobalStateService_AccountDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SmesherRewardStream",
			Handler:       _GlobalStateService_SmesherRewardStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AppEventStream",
			Handler:       _GlobalStateService_AppEventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GlobalStateStream",
			Handler:       _GlobalStateService_GlobalStateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/global_state.proto",
}
