// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/global_state.proto

package spacemesh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/global_state.proto", fileDescriptor_3360341c42d4e0c7) }

var fileDescriptor_3360341c42d4e0c7 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xcf, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x80, 0x61, 0xe2, 0x41, 0x30, 0xe8, 0xc1, 0x01, 0x8b, 0xb4, 0xfa, 0x0a, 0x69, 0xd0, 0xa3,
	0x78, 0xf0, 0x20, 0x1e, 0x85, 0xc6, 0xbb, 0xa4, 0x71, 0xac, 0x85, 0xb6, 0x09, 0xc9, 0x54, 0xe9,
	0x8b, 0xf9, 0x7c, 0xd2, 0xa6, 0x76, 0xcb, 0xb2, 0x6c, 0xaf, 0x33, 0xf9, 0x3f, 0x32, 0xfc, 0x26,
	0x38, 0x6d, 0xb0, 0xc5, 0xf0, 0x95, 0x57, 0x8d, 0x2d, 0x75, 0xf3, 0x1e, 0x48, 0x13, 0x0a, 0xe7,
	0x2d, 0x59, 0x38, 0x5b, 0xb6, 0x69, 0x56, 0x59, 0x5b, 0x35, 0x98, 0x4f, 0x8b, 0xb2, 0xff, 0xcc,
	0xb1, 0x75, 0x34, 0xc4, 0x77, 0xe9, 0xd5, 0x4e, 0xa1, 0xc1, 0x61, 0x88, 0xe3, 0xbb, 0xdf, 0x13,
	0x0e, 0x2f, 0x93, 0xaa, 0x46, 0x54, 0xa1, 0xff, 0xae, 0x0d, 0xc2, 0x23, 0xbf, 0x78, 0x32, 0xc6,
	0xf6, 0x1d, 0x29, 0xf2, 0xa8, 0x5b, 0x48, 0x44, 0xc4, 0xc5, 0x3f, 0x2e, 0x9e, 0x47, 0x3c, 0x05,
	0xb1, 0xb8, 0x62, 0x2e, 0x24, 0x83, 0x07, 0x7e, 0x5e, 0xe0, 0x8f, 0xf6, 0x1f, 0x1b, 0xf5, 0xe5,
	0xaa, 0x8e, 0x81, 0x64, 0xf0, 0xca, 0x93, 0x37, 0xaf, 0xbb, 0xa0, 0x0d, 0xd5, 0xb6, 0x8b, 0xdf,
	0x3a, 0xce, 0x64, 0x2b, 0x66, 0x3f, 0x95, 0x0c, 0x14, 0xbf, 0x5e, 0x4d, 0x0b, 0x34, 0x58, 0xbb,
	0xad, 0xbb, 0x6e, 0x0f, 0x93, 0x73, 0x2c, 0x59, 0x79, 0x3a, 0x05, 0xf7, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0xae, 0xd3, 0x5b, 0x9e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GlobalStateServiceClient is the client API for GlobalStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GlobalStateServiceClient interface {
	// Account changes (e.g., balance and counter/nonce changes).
	AccountStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_AccountStreamClient, error)
	// Rewards are computed by the protocol outside the STF but are a special
	// case and are passed through the STF since they touch account balances.
	RewardStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_RewardStreamClient, error)
	// Transaction State - rejected pre-STF, or pending STF, or processed by
	// STF
	TransactionStateStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_TransactionStateStreamClient, error)
	// Receipts - emitted after tx was processed by STF (or rejected before
	// STF)
	TransactionReceiptStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_TransactionReceiptStreamClient, error)
}

type globalStateServiceClient struct {
	cc *grpc.ClientConn
}

func NewGlobalStateServiceClient(cc *grpc.ClientConn) GlobalStateServiceClient {
	return &globalStateServiceClient{cc}
}

func (c *globalStateServiceClient) AccountStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_AccountStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[0], "/spacemesh.GlobalStateService/AccountStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceAccountStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_AccountStreamClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type globalStateServiceAccountStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceAccountStreamClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) RewardStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_RewardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[1], "/spacemesh.GlobalStateService/RewardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceRewardStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_RewardStreamClient interface {
	Recv() (*Reward, error)
	grpc.ClientStream
}

type globalStateServiceRewardStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceRewardStreamClient) Recv() (*Reward, error) {
	m := new(Reward)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) TransactionStateStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_TransactionStateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[2], "/spacemesh.GlobalStateService/TransactionStateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceTransactionStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_TransactionStateStreamClient interface {
	Recv() (*TransactionState, error)
	grpc.ClientStream
}

type globalStateServiceTransactionStateStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceTransactionStateStreamClient) Recv() (*TransactionState, error) {
	m := new(TransactionState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *globalStateServiceClient) TransactionReceiptStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (GlobalStateService_TransactionReceiptStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlobalStateService_serviceDesc.Streams[3], "/spacemesh.GlobalStateService/TransactionReceiptStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &globalStateServiceTransactionReceiptStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlobalStateService_TransactionReceiptStreamClient interface {
	Recv() (*TransactionReceipt, error)
	grpc.ClientStream
}

type globalStateServiceTransactionReceiptStreamClient struct {
	grpc.ClientStream
}

func (x *globalStateServiceTransactionReceiptStreamClient) Recv() (*TransactionReceipt, error) {
	m := new(TransactionReceipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GlobalStateServiceServer is the server API for GlobalStateService service.
type GlobalStateServiceServer interface {
	// Account changes (e.g., balance and counter/nonce changes).
	AccountStream(*empty.Empty, GlobalStateService_AccountStreamServer) error
	// Rewards are computed by the protocol outside the STF but are a special
	// case and are passed through the STF since they touch account balances.
	RewardStream(*empty.Empty, GlobalStateService_RewardStreamServer) error
	// Transaction State - rejected pre-STF, or pending STF, or processed by
	// STF
	TransactionStateStream(*empty.Empty, GlobalStateService_TransactionStateStreamServer) error
	// Receipts - emitted after tx was processed by STF (or rejected before
	// STF)
	TransactionReceiptStream(*empty.Empty, GlobalStateService_TransactionReceiptStreamServer) error
}

// UnimplementedGlobalStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGlobalStateServiceServer struct {
}

func (*UnimplementedGlobalStateServiceServer) AccountStream(req *empty.Empty, srv GlobalStateService_AccountStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) RewardStream(req *empty.Empty, srv GlobalStateService_RewardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RewardStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) TransactionStateStream(req *empty.Empty, srv GlobalStateService_TransactionStateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionStateStream not implemented")
}
func (*UnimplementedGlobalStateServiceServer) TransactionReceiptStream(req *empty.Empty, srv GlobalStateService_TransactionReceiptStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionReceiptStream not implemented")
}

func RegisterGlobalStateServiceServer(s *grpc.Server, srv GlobalStateServiceServer) {
	s.RegisterService(&_GlobalStateService_serviceDesc, srv)
}

func _GlobalStateService_AccountStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).AccountStream(m, &globalStateServiceAccountStreamServer{stream})
}

type GlobalStateService_AccountStreamServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type globalStateServiceAccountStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceAccountStreamServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_RewardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).RewardStream(m, &globalStateServiceRewardStreamServer{stream})
}

type GlobalStateService_RewardStreamServer interface {
	Send(*Reward) error
	grpc.ServerStream
}

type globalStateServiceRewardStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceRewardStreamServer) Send(m *Reward) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_TransactionStateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).TransactionStateStream(m, &globalStateServiceTransactionStateStreamServer{stream})
}

type GlobalStateService_TransactionStateStreamServer interface {
	Send(*TransactionState) error
	grpc.ServerStream
}

type globalStateServiceTransactionStateStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceTransactionStateStreamServer) Send(m *TransactionState) error {
	return x.ServerStream.SendMsg(m)
}

func _GlobalStateService_TransactionReceiptStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlobalStateServiceServer).TransactionReceiptStream(m, &globalStateServiceTransactionReceiptStreamServer{stream})
}

type GlobalStateService_TransactionReceiptStreamServer interface {
	Send(*TransactionReceipt) error
	grpc.ServerStream
}

type globalStateServiceTransactionReceiptStreamServer struct {
	grpc.ServerStream
}

func (x *globalStateServiceTransactionReceiptStreamServer) Send(m *TransactionReceipt) error {
	return x.ServerStream.SendMsg(m)
}

var _GlobalStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.GlobalStateService",
	HandlerType: (*GlobalStateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountStream",
			Handler:       _GlobalStateService_AccountStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RewardStream",
			Handler:       _GlobalStateService_RewardStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionStateStream",
			Handler:       _GlobalStateService_TransactionStateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionReceiptStream",
			Handler:       _GlobalStateService_TransactionReceiptStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/global_state.proto",
}
