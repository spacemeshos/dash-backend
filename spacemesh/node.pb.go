// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spacemesh/node.proto

package spacemesh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("spacemesh/node.proto", fileDescriptor_0220e119d2a86140) }

var fileDescriptor_0220e119d2a86140 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x29, 0x6a, 0xa5, 0xd3, 0x8b, 0x2c, 0xad, 0x62, 0x7c, 0x87, 0x4d, 0xd1, 0x83, 0x45,
	0xf1, 0x22, 0x04, 0x6f, 0x5e, 0x16, 0xbc, 0xa7, 0xc9, 0x98, 0x2e, 0x24, 0x99, 0x65, 0x76, 0x22,
	0xe4, 0xd9, 0x7c, 0x39, 0x71, 0x57, 0xa3, 0x14, 0x16, 0xf1, 0xfa, 0xcf, 0xf7, 0xfd, 0xfb, 0x2f,
	0xac, 0xbc, 0x2b, 0x2b, 0xec, 0xd0, 0xef, 0xf3, 0x9e, 0x6a, 0xd4, 0x8e, 0x49, 0x48, 0x2d, 0xa6,
	0x34, 0xbb, 0x6a, 0x88, 0x9a, 0x16, 0xf3, 0x70, 0xd8, 0x0d, 0xaf, 0x39, 0x76, 0x4e, 0xc6, 0xc8,
	0x65, 0xeb, 0x1f, 0x5b, 0x46, 0x87, 0x3e, 0xc6, 0xd7, 0xef, 0x47, 0xb0, 0x7c, 0xa6, 0x1a, 0x0d,
	0xf2, 0x9b, 0xad, 0x50, 0x6d, 0xe1, 0xb8, 0xa8, 0xf6, 0xa4, 0x2e, 0xf4, 0xc4, 0x6b, 0x63, 0x3b,
	0xd7, 0xa2, 0x11, 0xb6, 0x7d, 0x93, 0xa5, 0x0e, 0xea, 0x0e, 0x4e, 0x5f, 0x90, 0xbd, 0xa5, 0x5e,
	0x9d, 0xeb, 0xb8, 0x44, 0x7f, 0x2f, 0xd1, 0xc5, 0xe7, 0x92, 0xb4, 0xbb, 0x85, 0x93, 0xc7, 0xc1,
	0xb6, 0xf5, 0xff, 0xcd, 0x5b, 0x98, 0x1b, 0x29, 0x65, 0xf0, 0x49, 0x75, 0xfd, 0x4b, 0x0d, 0x3f,
	0x8d, 0xf8, 0x3d, 0x2c, 0xcc, 0xd8, 0x57, 0x46, 0x4a, 0x96, 0xa4, 0x9b, 0xc8, 0xd5, 0x13, 0x9c,
	0x7d, 0xc9, 0x32, 0x78, 0x23, 0x8c, 0x65, 0x97, 0xec, 0xb8, 0x3c, 0x7c, 0x7f, 0x12, 0x37, 0x33,
	0xf5, 0x00, 0xcb, 0x82, 0x99, 0xf8, 0x8f, 0x8e, 0xd5, 0x41, 0x47, 0x70, 0x36, 0xb3, 0xdd, 0x3c,
	0x70, 0x37, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xae, 0xdf, 0x4e, 0x1b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	// A simple test endpoint
	Echo(ctx context.Context, in *SimpleString, opts ...grpc.CallOption) (*SimpleString, error)
	// Returns the version of the node software as a semver string
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleString, error)
	// Returns the github tag or branch used to build the node
	Build(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleString, error)
	//  Current node status
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeStatus, error)
	// Request that the node start syncing the mesh
	SyncStart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Sync status events
	SyncStatusStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NodeService_SyncStatusStreamClient, error)
	// Node error events
	ErrorStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NodeService_ErrorStreamClient, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Echo(ctx context.Context, in *SimpleString, opts ...grpc.CallOption) (*SimpleString, error) {
	out := new(SimpleString)
	err := c.cc.Invoke(ctx, "/spacemesh.NodeService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleString, error) {
	out := new(SimpleString)
	err := c.cc.Invoke(ctx, "/spacemesh.NodeService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Build(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleString, error) {
	out := new(SimpleString)
	err := c.cc.Invoke(ctx, "/spacemesh.NodeService/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/spacemesh.NodeService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SyncStart(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/spacemesh.NodeService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SyncStatusStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NodeService_SyncStatusStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[0], "/spacemesh.NodeService/SyncStatusStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceSyncStatusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_SyncStatusStreamClient interface {
	Recv() (*NodeSyncStatus, error)
	grpc.ClientStream
}

type nodeServiceSyncStatusStreamClient struct {
	grpc.ClientStream
}

func (x *nodeServiceSyncStatusStreamClient) Recv() (*NodeSyncStatus, error) {
	m := new(NodeSyncStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) ErrorStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NodeService_ErrorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeService_serviceDesc.Streams[1], "/spacemesh.NodeService/ErrorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceErrorStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_ErrorStreamClient interface {
	Recv() (*NodeError, error)
	grpc.ClientStream
}

type nodeServiceErrorStreamClient struct {
	grpc.ClientStream
}

func (x *nodeServiceErrorStreamClient) Recv() (*NodeError, error) {
	m := new(NodeError)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	// A simple test endpoint
	Echo(context.Context, *SimpleString) (*SimpleString, error)
	// Returns the version of the node software as a semver string
	Version(context.Context, *empty.Empty) (*SimpleString, error)
	// Returns the github tag or branch used to build the node
	Build(context.Context, *empty.Empty) (*SimpleString, error)
	//  Current node status
	Status(context.Context, *empty.Empty) (*NodeStatus, error)
	// Request that the node start syncing the mesh
	SyncStart(context.Context, *empty.Empty) (*empty.Empty, error)
	// Sync status events
	SyncStatusStream(*empty.Empty, NodeService_SyncStatusStreamServer) error
	// Node error events
	ErrorStream(*empty.Empty, NodeService_ErrorStreamServer) error
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) Echo(ctx context.Context, req *SimpleString) (*SimpleString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedNodeServiceServer) Version(ctx context.Context, req *empty.Empty) (*SimpleString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedNodeServiceServer) Build(ctx context.Context, req *empty.Empty) (*SimpleString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (*UnimplementedNodeServiceServer) Status(ctx context.Context, req *empty.Empty) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedNodeServiceServer) SyncStart(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
}
func (*UnimplementedNodeServiceServer) SyncStatusStream(req *empty.Empty, srv NodeService_SyncStatusStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncStatusStream not implemented")
}
func (*UnimplementedNodeServiceServer) ErrorStream(req *empty.Empty, srv NodeService_ErrorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ErrorStream not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.NodeService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Echo(ctx, req.(*SimpleString))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.NodeService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.NodeService/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Build(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.NodeService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SyncStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spacemesh.NodeService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SyncStart(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SyncStatusStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).SyncStatusStream(m, &nodeServiceSyncStatusStreamServer{stream})
}

type NodeService_SyncStatusStreamServer interface {
	Send(*NodeSyncStatus) error
	grpc.ServerStream
}

type nodeServiceSyncStatusStreamServer struct {
	grpc.ServerStream
}

func (x *nodeServiceSyncStatusStreamServer) Send(m *NodeSyncStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_ErrorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).ErrorStream(m, &nodeServiceErrorStreamServer{stream})
}

type NodeService_ErrorStreamServer interface {
	Send(*NodeError) error
	grpc.ServerStream
}

type nodeServiceErrorStreamServer struct {
	grpc.ServerStream
}

func (x *nodeServiceErrorStreamServer) Send(m *NodeError) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _NodeService_Echo_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _NodeService_Version_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _NodeService_Build_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _NodeService_Status_Handler,
		},
		{
			MethodName: "SyncStart",
			Handler:    _NodeService_SyncStart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncStatusStream",
			Handler:       _NodeService_SyncStatusStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ErrorStream",
			Handler:       _NodeService_ErrorStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/node.proto",
}
